generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id              Int               @id @default(autoincrement())
  title           String?           @unique(map: "title") @db.VarChar(30)
  description     String            @db.VarChar(100)
  post_categories post_categories[]
}

model comment {
  id            Int             @id @default(autoincrement())
  author        String          @db.VarChar(30)
  publish_date  DateTime        @default(now()) @db.Timestamp(0)
  content       String          @db.VarChar(1000)
  user          user            @relation(fields: [author], references: [login], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_1")
  comment_likes comment_likes[]
  post_comments post_comments[]

  @@index([author], map: "author")
}

model comment_likes {
  comment_id  Int
  like_id     Int
  comment     comment     @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_likes_ibfk_1")
  like_entity like_entity @relation(fields: [like_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_likes_ibfk_2")

  @@id([comment_id, like_id])
  @@index([like_id], map: "like_id")
}

model like_entity {
  id            Int              @id @default(autoincrement())
  author        String           @db.VarChar(30)
  publish_date  DateTime         @default(now()) @db.Timestamp(0)
  type          like_entity_type @default(like)
  user          user             @relation(fields: [author], references: [login], onDelete: NoAction, onUpdate: NoAction, map: "like_entity_ibfk_1")
  comment_likes comment_likes[]
  post_likes    post_likes[]

  @@index([author], map: "author")
}

model post {
  id              Int               @id @default(autoincrement())
  author          String            @db.VarChar(30)
  title           String            @db.VarChar(100)
  publish_date    DateTime          @default(now()) @db.Timestamp(0)
  status          post_status?      @default(active)
  content         String?           @db.VarChar(5000)
  user            user              @relation(fields: [author], references: [login], onDelete: Cascade, onUpdate: NoAction, map: "post_ibfk_1")
  post_categories post_categories[]
  post_comments   post_comments[]
  post_likes      post_likes[]

  @@index([author], map: "author")
}

model post_categories {
  post_id     Int
  category_id Int
  post        post     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_categories_ibfk_1")
  category    category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_categories_ibfk_2")

  @@id([post_id, category_id])
  @@index([category_id], map: "category_id")
}

model post_comments {
  post_id    Int
  comment_id Int
  post       post    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_comments_ibfk_1")
  comment    comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_comments_ibfk_2")

  @@id([post_id, comment_id])
  @@index([comment_id], map: "comment_id")
}

model post_likes {
  post_id     Int
  like_id     Int
  post        post        @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_likes_ibfk_1")
  like_entity like_entity @relation(fields: [like_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_likes_ibfk_2")

  @@id([post_id, like_id])
  @@index([like_id], map: "like_id")
}

model user {
  id              Int           @id @default(autoincrement())
  login           String        @unique(map: "login") @db.VarChar(30)
  password        String        @db.Char(60)
  full_name       String        @db.VarChar(50)
  email           String        @db.VarChar(255)
  profile_picture String        @db.VarChar(255)
  rating          Int           @default(0)
  role            user_role     @default(user)
  comment         comment[]
  like_entity     like_entity[]
  post            post[]
}

enum post_status {
  active
  inactive
}

enum like_entity_type {
  like
  dislike
}

enum user_role {
  user
  admin
}
