generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id              Int               @id @default(autoincrement())
  title           String            @unique(map: "title") @db.VarChar(30)
  description     String            @default("") @db.VarChar(500)
  post_categories post_categories[]
}

model like_entity {
  id            Int              @id @default(autoincrement())
  author_id     Int
  target_post   Int?
  target_answer Int?
  publish_date  DateTime         @default(now()) @db.Timestamp(0)
  type          like_entity_type @default(like)
  user          user             @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "like_entity_ibfk_1")
  post          post?            @relation(fields: [target_post], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "like_entity_ibfk_2")
  answer        answer?          @relation(fields: [target_answer], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "like_entity_ibfk_3")

  @@unique([author_id, target_post], map: "uc_like_authorPost")
  @@unique([author_id, target_answer], map: "uc_like_authorAnswer")
  @@index([target_post], map: "target_post")
  @@index([target_answer], map: "target_answer")
}

model post {
  id              Int               @id @default(autoincrement())
  author_id       Int
  title           String            @db.VarChar(100)
  publish_date    DateTime          @default(now()) @db.Timestamp(0)
  content         String?           @db.VarChar(5000)
  status          post_status?      @default(active)
  rating          Int               @default(0)
  user            user              @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_ibfk_1")
  answer          answer[]
  like_entity     like_entity[]
  post_categories post_categories[]

  @@index([author_id], map: "author_id")
}

model post_categories {
  post_id     Int
  category_id Int
  post        post     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_categories_ibfk_1")
  category    category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_categories_ibfk_2")

  @@id([post_id, category_id])
  @@index([category_id], map: "category_id")
}

model user {
  id              Int             @id @default(autoincrement())
  login           String          @unique(map: "login") @db.VarChar(30)
  password        String          @db.Char(60)
  full_name       String          @db.VarChar(50)
  email           String          @unique(map: "email") @db.VarChar(255)
  email_verified  Boolean?        @default(false)
  profile_picture String          @db.VarChar(255)
  rating          Int             @default(0)
  role            user_role       @default(user)
  answer          answer[]
  comment         comment[]
  email_token     email_token?
  like_entity     like_entity[]
  password_token  password_token?
  post            post[]
}

model email_token {
  user_id    Int      @id @unique(map: "user_id")
  token      String   @unique(map: "token") @db.Char(36)
  created_at DateTime @default(now()) @db.Timestamp(0)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "email_token_ibfk_1")
}

model password_token {
  user_id    Int      @id
  token      String   @unique(map: "token") @db.Char(36)
  created_at DateTime @default(now()) @db.Timestamp(0)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "password_token_ibfk_1")
}

model answer {
  id           Int            @id @default(autoincrement())
  author_id    Int
  post_id      Int
  content      String         @db.VarChar(1000)
  status       answer_status? @default(active)
  rating       Int            @default(0)
  publish_date DateTime       @default(now()) @db.Timestamp(0)
  user         user           @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "answer_ibfk_1")
  post         post           @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "answer_ibfk_2")
  comment      comment[]
  like_entity  like_entity[]

  @@index([author_id], map: "author_id")
  @@index([post_id], map: "post_id")
}

model comment {
  id           Int             @id @default(autoincrement())
  author_id    Int
  answer_id    Int
  content      String          @db.VarChar(500)
  status       comment_status? @default(active)
  publish_date DateTime        @default(now()) @db.Timestamp(0)
  user         user            @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_1")
  answer       answer          @relation(fields: [answer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_2")

  @@index([answer_id], map: "answer_id")
  @@index([author_id], map: "author_id")
}

enum post_status {
  active
  inactive
}

enum like_entity_type {
  like
  dislike
}

enum user_role {
  user
  admin
}

enum answer_status {
  active
  inactive
}

enum comment_status {
  active
  inactive
}
